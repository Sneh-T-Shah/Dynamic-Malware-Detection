import pefile
import hashlib

def list_imported_api_calls(exe_path):
    pe = pefile.PE(exe_path)
    api_calls = []

    # Loop through each imported DLL and list its functions
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        for imp in entry.imports:
            dll = entry.dll.decode().split(".")[0]
            # api_calls.append(f"{dll}.{imp.name.decode()}")
            json = {
                "pc": "",
                "api_name": f"{dll}.{imp.name.decode()}",
                "args": [],
                "ret_val": "null"
            }
            api_calls.append(json)
    
    return api_calls

def get_file_hash(exe_path, hash_type='sha256'):
    # Initialize the chosen hash algorithm
    hash_func = hashlib.new(hash_type)

    # Read the file in binary mode and update the hash in chunks
    with open(exe_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_func.update(chunk)

    # Return the hexadecimal hash value
    return hash_func.hexdigest()

def getJSON(exe_path):
    final_json = {
        "ep_type": "exe",
        "start_addr": "",
        "apihash": get_file_hash(exe_path),
        "api_calls": list_imported_api_calls(exe_path),
        "ret_val":"",
        "network_events":[],
        "error": {},
        "dynamic_code_segments": []
    }
    return final_json